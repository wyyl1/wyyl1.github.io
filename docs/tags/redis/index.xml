<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on Even - A super concise theme for Hugo</title>
    <link>https://wyyl1.github.io/tags/redis/</link>
    <description>Recent content in Redis on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 01 Apr 2021 21:30:05 +0800</lastBuildDate><atom:link href="https://wyyl1.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>19 | 波动的响应延迟：如何应对变慢的Redis？（下）</title>
      <link>https://wyyl1.github.io/post/storage/redis/geekbang/chap19/</link>
      <pubDate>Thu, 01 Apr 2021 21:30:05 +0800</pubDate>
      
      <guid>https://wyyl1.github.io/post/storage/redis/geekbang/chap19/</guid>
      <description>原文 文件系统：AOF 模式 write 只要把日志记录写到内核缓冲区，就可以返回了，并不需要等待日志实际写回到磁盘 fsync 需要把日志记录写回到磁盘后才能返回，时</description>
    </item>
    
    <item>
      <title>18 | 波动的响应延迟：如何应对变慢的Redis？（上）</title>
      <link>https://wyyl1.github.io/post/storage/redis/geekbang/chap18/</link>
      <pubDate>Thu, 01 Apr 2021 20:30:05 +0800</pubDate>
      
      <guid>https://wyyl1.github.io/post/storage/redis/geekbang/chap18/</guid>
      <description>原文 Redis 真的变慢了吗？ 查看 Redis 的响应延迟 当前环境下的 Redis 基线性能 redis-cli 命令提供了–intrinsic-latency 选项，可以用来监测和统计测试期间内</description>
    </item>
    
    <item>
      <title>17 | 为什么CPU结构也会影响Redis的性能？</title>
      <link>https://wyyl1.github.io/post/storage/redis/geekbang/chap17/</link>
      <pubDate>Thu, 01 Apr 2021 20:10:05 +0800</pubDate>
      
      <guid>https://wyyl1.github.io/post/storage/redis/geekbang/chap17/</guid>
      <description>原文 主流的 CPU 架构 要避免 Redis 总是在不同 CPU 核上来回调度执行，可以使用 taskset 命令把一个程序绑定在一个核上运行。 执行下面的命令，就把 Redis 实例绑在了 0 号核上，</description>
    </item>
    
    <item>
      <title>16 | 异步机制：如何避免单线程模型的阻塞？</title>
      <link>https://wyyl1.github.io/post/storage/redis/geekbang/chap16/</link>
      <pubDate>Thu, 01 Apr 2021 08:10:05 +0800</pubDate>
      
      <guid>https://wyyl1.github.io/post/storage/redis/geekbang/chap16/</guid>
      <description>原文 影响 Redis 性能的 5 大方面 Redis 内部的阻塞式操作； CPU 核和 NUMA 架构的影响； Redis 关键系统配置； Redis 内存碎片；Redis 缓冲区。 Redis 实例有哪些阻塞点？ 和 Redis 交互时</description>
    </item>
    
    <item>
      <title>15 | 消息队列的考验：Redis有哪些解决方案？</title>
      <link>https://wyyl1.github.io/post/storage/redis/geekbang/chap15/</link>
      <pubDate>Wed, 31 Mar 2021 20:50:05 +0800</pubDate>
      
      <guid>https://wyyl1.github.io/post/storage/redis/geekbang/chap15/</guid>
      <description>原文 消息队列的消息存取需求 消息保序 重复消息处理 消息可靠性保证 基于 List 的消息队列解决方案 List 本身就是按先进先出的顺序对数据进行存取 LPUSH 命令 把要发送的</description>
    </item>
    
    <item>
      <title>14 | 如何在Redis中保存时间序列数据？</title>
      <link>https://wyyl1.github.io/post/storage/redis/geekbang/chap14/</link>
      <pubDate>Fri, 26 Mar 2021 08:50:05 +0800</pubDate>
      
      <guid>https://wyyl1.github.io/post/storage/redis/geekbang/chap14/</guid>
      <description>时间序列数据的读写特点 写入特点 插入数据快 要求我们选择的数据类型，在进行数据插入时，复杂度要低，尽量不要阻塞 读特点 查询单条记录 查询时间范围内的</description>
    </item>
    
    <item>
      <title>12 | 有一亿个keys要统计，应该用哪种集合？</title>
      <link>https://wyyl1.github.io/post/storage/redis/geekbang/chap12/</link>
      <pubDate>Tue, 23 Mar 2021 21:50:05 +0800</pubDate>
      
      <guid>https://wyyl1.github.io/post/storage/redis/geekbang/chap12/</guid>
      <description>集合类型常见的四种统计模式 聚合统计 排序统计 二值状态统计 基数统计 聚合统计 交集 并集 差集 举例：每天的新增用户数和第二天的留存用户数 一个集合记录所有</description>
    </item>
    
    <item>
      <title>13 | GEO是什么？还可以定义新的数据类型吗？</title>
      <link>https://wyyl1.github.io/post/storage/redis/geekbang/chap13/</link>
      <pubDate>Tue, 23 Mar 2021 21:50:05 +0800</pubDate>
      
      <guid>https://wyyl1.github.io/post/storage/redis/geekbang/chap13/</guid>
      <description>GEO 面向 LBS (Location-Based Service) 应用的数据类型 GEO 的底层结构 GEO 类型的底层数据结构就是用 Sorted Set 来实现的 GeoHash 编码：将一组经纬度转为一个浮点数 Redis 的基本对象结构 RedisObject 的内部组成包</description>
    </item>
    
    <item>
      <title>11 “万金油”的String，为什么不好用了？</title>
      <link>https://wyyl1.github.io/post/storage/redis/geekbang/chap11/</link>
      <pubDate>Tue, 23 Mar 2021 21:20:05 +0800</pubDate>
      
      <guid>https://wyyl1.github.io/post/storage/redis/geekbang/chap11/</guid>
      <description>为什么 String 类型内存开销大？ 除了记录实际数据，String 类型还需要额外的内存空间记录数据长度、空间使用等信息，这些信息也叫作元数据。 当实际保存</description>
    </item>
    
    <item>
      <title>06 数据同步：主从库如何实现数据一致？</title>
      <link>https://wyyl1.github.io/post/storage/redis/geekbang/chap06/</link>
      <pubDate>Fri, 19 Mar 2021 21:43:05 +0800</pubDate>
      
      <guid>https://wyyl1.github.io/post/storage/redis/geekbang/chap06/</guid>
      <description>Redis 具有高可靠性 一是数据尽量少丢失 AOF 和 RDB 实现 二是服务尽量少中断 增加副本冗余量 主从库间网络断了怎么办？ repl_backlog_buffer 是一个环形缓冲区，主库会记录自己写到的位</description>
    </item>
    
    <item>
      <title>07 哨兵机制：主库挂了，如何不间断服务？</title>
      <link>https://wyyl1.github.io/post/storage/redis/geekbang/chap07/</link>
      <pubDate>Fri, 19 Mar 2021 21:43:05 +0800</pubDate>
      
      <guid>https://wyyl1.github.io/post/storage/redis/geekbang/chap07/</guid>
      <description>从库切换为主库，涉及三个问题 主库真的挂了吗？ 该选择哪个从库作为主库？ 怎么把新主库的相关信息通知给从库和客户端呢？ 在 Redis 主从集群中，哨兵机制是实</description>
    </item>
    
    <item>
      <title>08 哨兵集群：哨兵挂了，主从库还能切换吗？</title>
      <link>https://wyyl1.github.io/post/storage/redis/geekbang/chap08/</link>
      <pubDate>Fri, 19 Mar 2021 21:43:05 +0800</pubDate>
      
      <guid>https://wyyl1.github.io/post/storage/redis/geekbang/chap08/</guid>
      <description>哨兵集群的组成和运行机制 基于 pub/sub 机制的哨兵集群组成 哨兵实例之间可以相互发现，要归功于 Redis 提供的 pub/sub 机制，也就是发布 / 订阅机制。 哨兵只要和主库建立起</description>
    </item>
    
    <item>
      <title>09 切片集群：数据增多了，是该加内存还是加实例？</title>
      <link>https://wyyl1.github.io/post/storage/redis/geekbang/chap09/</link>
      <pubDate>Fri, 19 Mar 2021 21:43:05 +0800</pubDate>
      
      <guid>https://wyyl1.github.io/post/storage/redis/geekbang/chap09/</guid>
      <description>在使用 RDB 进行持久化时，Redis 会 fork 子进程来完成，fork 操作的用时和 Redis 的数据量是正相关的，而 fork 在执行时会阻塞主线程。数据量越大，fork 操</description>
    </item>
    
    <item>
      <title>加餐（一）| 经典的Redis学习资料有哪些？</title>
      <link>https://wyyl1.github.io/post/storage/redis/geekbang/extra_meal01/</link>
      <pubDate>Fri, 19 Mar 2021 21:43:05 +0800</pubDate>
      
      <guid>https://wyyl1.github.io/post/storage/redis/geekbang/extra_meal01/</guid>
      <description>官网 翻译版的命令参考 工具书：《Redis 使用手册》 可以帮助我们快速地了解或查询 Redis 的日常使用命令和操作方法 原理书：《Redis 设计与实现》 在 Redis</description>
    </item>
    
    <item>
      <title>10 第1～9讲课后思考题答案及常见问题答疑</title>
      <link>https://wyyl1.github.io/post/storage/redis/geekbang/chap10/</link>
      <pubDate>Fri, 19 Mar 2021 21:13:05 +0800</pubDate>
      
      <guid>https://wyyl1.github.io/post/storage/redis/geekbang/chap10/</guid>
      <description>不知道计算机底层读写原理，可以直接忽略本章 Redis 基本 IO 模型中还有哪些潜在的性能瓶颈？ 进一步理解阻塞操作对 Redis 单线程性能的影响。 在 Redis 基本 IO 模型中，主</description>
    </item>
    
  </channel>
</rss>
